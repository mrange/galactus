<#@ assembly    name        ="System.Core"                  #>
<#@ assembly    name        ="WindowsBase"                  #>
<#@ assembly    name        ="PresentationCore"             #>
<#@ assembly    name        ="PresentationFramework"        #>

<#@ import      namespace   ="System"                       #>
<#@ import      namespace   ="System.Text"                  #>
<#@ import      namespace   ="System.Collections.Generic"   #>
<#@ import      namespace   ="System.Linq"                  #>
<#@ import      namespace   ="System.Reflection"            #>

namespace Galactus.Standard
{
  using Galactus.Core;

<#
  string FixName(string s)
  {
    if (s.Length > 0)
    {
      var c = s[0];
      return Char.IsLower(c)
        ? s
        : (Char.ToLowerInvariant(c)).ToString () + s.Substring(1)
        ;
    }
    else
    {
      return s;
    }
  }

  string RemoveTrailing(string t, string s)
  {
    var i = s.LastIndexOf(t);
    return i > 0
      ? s.Substring(0, i)
      : s
      ;
  }

  string TypeName(Type t)
  {
    var sb = new StringBuilder(16);

    void Loop(Type tp)
    {
      if (tp.IsGenericType)
      {
        var itps  = tp.GetGenericArguments();
        var gtp   = tp.GetGenericTypeDefinition();
        var tpn   = RemoveTrailing("`" + itps.Length, gtp.FullName);
        sb
          .Append(tpn)
          .Append('<')
          ;
        for (var i = 0; i < itps.Length; ++i)
        {
          if (i > 0) sb.Append(", ");
          Loop(itps[i]);
        }
        sb
          .Append('>')
          ;
      }
      else
      {
        sb.Append(tp.FullName);
      }
    }

    Loop(t);

    return sb.ToString();
  }

  var content             = typeof (System.Windows.Controls.ContentControl) ;
  var dependencyProperty  = typeof (System.Windows.DependencyProperty)      ;
  var eventArgs           = typeof (System.EventArgs)                       ;
  var panel               = typeof (System.Windows.Controls.Panel)          ;
  var uiElement           = typeof (System.Windows.UIElement)               ;

  var assemblies = new [] {
      uiElement.Assembly
    , panel.Assembly
  };

  var blackList = new HashSet<Type> (new Type[] {
//      typeof (System.Windows.Interop.HwndHost)
  });

  var types = assemblies
    .SelectMany(a => a.ExportedTypes)
    .Where(t => t == uiElement || t.IsSubclassOf(uiElement))
    .Where(t => !t.IsGenericType)
    .Where(t => !blackList.Contains(t))
    .OrderBy(t => t.Name)
    ;
#>

  public static class Properties
  {
<#
  foreach (var tp in types)
  {
    var bt    = tp.BaseType;
    var bfs   = BindingFlags.DeclaredOnly | BindingFlags.Public;

    var dps   = tp
      .GetFields(BindingFlags.Static | bfs)
      .Where(f => f.Name.EndsWith("Property") && f.FieldType == dependencyProperty)
      .ToArray()
      ;

    var evts  = tp
      .GetEvents (BindingFlags.Instance | bfs)
      ;

#>
    public class <#=FixName(tp.Name)#><#= tp == uiElement ? "" : " : " + FixName(bt.Name) #>
    {
<#
  var etn = TypeName(tp);
  foreach (var f in dps)
  {
    var dp    = (System.Windows.DependencyProperty)f.GetValue(null);
    var pn    = FixName(RemoveTrailing("Property", f.Name));
    var dptn  = TypeName(dp.PropertyType);
#>
      public static readonly IProperty<<#=etn#>, <#=dptn#>> <#=pn#> = new Property<<#=etn#>, <#=dptn#>>(<#=etn#>.<#=f.Name#>);
<#
  }
#>
    }

<#
  }
#>
  }

  public static class Controls<TMessage>
  {
<#
  foreach (var tp in types)
  {
    var bt    = tp.BaseType;
    var bfs   = BindingFlags.DeclaredOnly | BindingFlags.Public;

    var dps   = tp
      .GetFields(BindingFlags.Static | bfs)
      .Where(f => f.Name.EndsWith("Property") && f.FieldType == dependencyProperty)
      .ToArray()
      ;

    var evts  = tp
      .GetEvents (BindingFlags.Instance | bfs)
      ;

#>
    public class <#=FixName(tp.Name)#><#= tp == uiElement ? "" : " : " + FixName(bt.Name) #>
    {
<#
  var etn = TypeName(tp);
#>
<#
  foreach (var f in dps)
  {
    var dp    = (System.Windows.DependencyProperty)f.GetValue(null);
    var pn    = FixName(RemoveTrailing("Property", f.Name));
    var dptn  = TypeName(dp.PropertyType);
#>
      public static IValue<TMessage, <#=etn#>> <#=pn#>(<#=dptn#> v) => new SetValue<TMessage, <#=etn#>, <#=dptn#>>(Properties.<#=FixName(tp.Name)#>.<#=pn#>, v);
<#
  }
#>

<#
  foreach (var e in evts)
  {
    var name  = e.Name                  ;
    var eh    = e.EventHandlerType      ;
    var mi    = eh.GetMethod("Invoke")  ;
    var ps    = mi.GetParameters()      ;
    var p     = ps[1]                   ;
    var pt    = p.ParameterType         ;
    var ehn   = TypeName(eh)            ;
    var ean   = TypeName(pt)            ;
    if (pt.IsSubclassOf(eventArgs))
    {
#>
      public static IValue<TMessage, <#=etn#>> on<#=RemoveTrailing("Changed", name)#> (OnChange<TMessage, <#=etn#>, <#=ean#>> onChange) =>
        new OnChangedValue<TMessage, <#=etn#>, <#=ehn#>, <#=ean#>> ((ui, a) => ui.<#=name#> += a.Invoke, onChange);
<#
    }
  }
#>

<#
  if (!tp.IsAbstract && tp.GetConstructor(new Type [] {}) != null)
  {
  if (tp.IsSubclassOf(content))
  {
#>
      public static DelayedContentView<TMessage> View(params IValue<TMessage, <#=etn#>>[] vs) => c => new StandardContentView<TMessage, <#=etn#>>(vs, c);
<#
  }
  else if (tp.IsSubclassOf(panel))
  {
#>
      public static DelayedPanelView<TMessage> View(params IValue<TMessage, <#=etn#>>[] vs) => cs => new StandardPanelView<TMessage, <#=etn#>>(vs, cs);
<#
  }
  else
  {
#>
      public static IView<TMessage> View(params IValue<TMessage, <#=etn#>>[] vs) => new StandardView<TMessage, <#=etn#>>(vs);
<#
  }
  }
#>
    }

<#
  }
#>
  }
}
